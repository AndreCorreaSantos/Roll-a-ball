// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct BoidInfo
{
    float3 position;
    float3 forward;
};

float3 normalizeSafe(float3 v)
{
    return length(v) > 0 ? normalize(v) : 0;
}

RWStructuredBuffer<BoidInfo> inputBuffer;
uint numBoids;
float deltaTime;
float3 targetPosition;
half separationWeight;
half alignmentWeight;
half targetWeight;
half moveSpeed;

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    uint boidIndex = id.x;
    BoidInfo boidSelf = inputBuffer[boidIndex];
    float3 cellAlignment, cellSeparation;

    for (uint i = 0; i < numBoids; ++i)
    {
        if (i == boidIndex) continue; // Skip the current boid
    
        BoidInfo boidOther = inputBuffer[i];
        cellAlignment += boidOther.forward;
        float3 distance = boidOther.position - boidSelf.position;
        cellSeparation += distance; // This should possibly be calculated differently to reflect actual separation behavior
    }

    const float3 alignmentResult = alignmentWeight *
        normalizeSafe((cellAlignment / numBoids) - boidSelf.forward);

    const float3 separationResult = separationWeight *
        normalizeSafe((boidSelf.position / numBoids) - cellSeparation);

    const float3 targetHeading = targetWeight
        * normalizeSafe(targetPosition - boidSelf.position); // run from target

    const float3 normalHeading = normalizeSafe(alignmentResult + separationResult + targetHeading);

    const float3 nextHeading = normalizeSafe(boidSelf.forward + deltaTime * (normalHeading - boidSelf.forward));

    // Update Boid
    boidSelf.position = boidSelf.position + (nextHeading * moveSpeed * deltaTime);
    boidSelf.forward = nextHeading;
    inputBuffer[boidIndex] = boidSelf;

}
